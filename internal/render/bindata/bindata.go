// Code generated by go-bindata.
// sources:
// templates/call.tmpl
// templates/function.tmpl
// templates/header.tmpl
// templates/inline.tmpl
// templates/inputs.tmpl
// templates/message.tmpl
// templates/results.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCallTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8e\x51\xca\xc2\x40\x0c\x84\xaf\x12\x4a\x1f\xfe\x1f\x4a\x0e\x20\x78\x00\x5f\x44\x54\xf4\x79\xd9\xa6\x1a\xa8\xab\xa4\x51\x91\x90\xbb\xdb\x2d\xd5\xf5\x29\x30\xf3\x4d\x66\xcc\x5a\xea\x38\x11\x54\x31\xf4\x7d\xe5\x6e\xf6\x64\x3d\x03\x6e\x29\x12\x3f\x48\xb2\xc2\x1d\xa4\xab\x02\xae\x86\x9d\xca\x3d\xaa\xbb\x2a\x9a\x51\x6a\xb3\xfb\x21\x01\xdd\x8b\x8a\xeb\x70\x21\xf7\x3f\x33\x09\xe9\x44\x50\x73\x03\x35\xf5\xb0\x58\x02\x6e\x82\x8c\xa6\x92\x0c\xf3\xf7\x9a\xdd\x1b\xf8\x66\x4b\xdf\x51\x58\xf3\x86\xdf\xbe\x29\x9d\xcb\x26\x10\xf7\xaf\x1b\x8d\xe4\x21\x08\x87\x96\xe3\xb8\x01\x0b\x3b\x9d\xff\xf9\xbe\x03\x00\x00\xff\xff\x9d\x9f\x57\x19\xec\x00\x00\x00")

func templatesCallTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCallTmpl,
		"templates/call.tmpl",
	)
}

func templatesCallTmpl() (*asset, error) {
	bytes, err := templatesCallTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/call.tmpl", size: 236, mode: os.FileMode(420), modTime: time.Unix(1458245638, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x41\x6f\xdb\x3c\x0c\x3d\x3b\xbf\x82\x0d\xda\xc2\xfe\x60\xa8\xf7\x16\x3d\x7c\x45\xbb\xa1\x87\x35\x45\x5b\xac\x87\x61\x18\x54\x9b\xee\x84\x29\x72\x26\xc9\x29\x02\xc3\xff\x7d\x94\x6c\xc5\x4e\x62\x77\xbd\xec\xe4\x88\x22\x1f\x1f\xf9\x48\xa5\xae\x73\x2c\x84\x42\x98\x17\x95\xca\xac\x28\xd5\xbc\x69\xa0\xae\x8f\x0b\x38\xbf\x04\xd6\x34\xb3\x99\xbb\x20\x0b\x7b\x42\x63\xef\xf8\x12\x9b\x26\xb6\xf0\x9f\xa5\x93\x50\xaf\xec\x29\x81\x7a\x16\xb9\x93\x71\x11\xdf\xbe\x1b\xab\xab\xcc\x42\x4d\x21\xa2\x00\x55\x5a\x38\x2e\xd8\xbd\x16\xca\xde\xaa\x55\x65\x0d\x41\x46\x91\x22\x1c\x20\x4f\x42\x20\x3f\x54\xb9\x4f\xfa\x26\xec\x4f\x60\x0f\x98\xa1\x58\xa3\xf6\x26\x82\x60\xb7\xe6\xd1\x63\x7a\x83\xe6\xea\x15\x81\x7d\x12\x28\xf3\x16\xab\xae\xfd\xc1\x91\xf5\x34\x37\x2b\xf4\xbf\x02\x2a\x4a\x83\x9d\x63\x80\x9e\xf6\xed\xbe\x5d\x16\x57\xf2\x3d\xd7\x44\xd6\xa2\x0e\xd9\xbc\x61\x12\x61\x10\xf9\x80\xa6\x92\x36\x84\x3d\x73\x65\x27\xa3\x5c\x99\x0f\x68\x2b\xad\xcc\x8d\xd6\xa5\xf6\x31\x6f\x14\x41\x27\x78\x29\x4b\x19\x7c\x67\x51\x43\xed\x8e\xce\xce\xe0\x69\x71\xbd\x38\x87\xff\xf3\x1c\x5c\xf3\x21\xe3\x06\x0d\xa3\xeb\x59\x54\x94\xba\x6f\x3e\x75\xef\x8e\xff\x42\x97\xe6\x47\x0a\xd6\x3a\x91\x42\xde\x96\x6b\xab\x5d\x3d\xd2\xff\xfd\xf6\x1f\xf6\xd0\x83\x39\x27\x57\x91\xf7\xe4\x14\x77\xda\x25\xe8\x2a\x65\x5f\xb9\xac\xa8\xde\x7a\x42\x3e\xd6\x4e\xd5\x39\xb1\x63\x03\x31\xd3\xbe\xe6\xe8\x1d\x8d\x86\xfa\x04\xc2\xcf\x5a\x58\xd4\x07\x7a\x11\xdb\xd3\x97\x0d\xd5\xcb\xae\xaa\xa2\x40\x5d\x8f\xc1\x12\x02\x57\x39\xc4\xbe\x79\x0b\x25\x37\x43\x5d\x92\x43\xfb\x42\xa1\xaf\x2f\x81\x2e\x9f\xc5\xe5\x4a\x72\x4b\x2b\xa5\xdb\x01\x98\xd3\x06\x78\xe8\xfe\x26\xe3\x52\x6e\xcd\xef\x0e\x01\x19\xdb\x9b\x7d\x2a\x14\x82\x34\x1c\x5e\x81\x31\xe0\x8b\x2d\x72\xec\xfc\x8e\x2e\x41\x09\x99\xb8\x2f\xb5\x39\x8c\x96\x9b\xa5\xc8\x32\x0f\x58\xc4\xf3\x21\xd2\x12\x8d\xe1\xaf\xd8\xb1\x44\xe7\x01\x97\x70\xb2\x4e\x21\x04\x9f\xac\xe7\xe9\x4e\x72\xe1\x17\xbc\x8f\x48\x07\xa9\x92\x30\x28\x7b\x8b\x11\x65\xa5\xa2\x87\xa4\xc2\x09\xb5\xc7\xf6\x09\x46\x74\xf6\x7d\xfa\x5c\xda\x7e\x2c\xb7\xba\xb3\x47\xff\xd0\xc4\xc9\xc5\xc0\xa5\xed\xc3\x70\x2d\xbb\xa7\x02\x5a\xe8\x2b\x6e\x44\xd6\xee\xe9\x40\x05\x7a\xca\x46\xa4\x77\x83\xb7\x93\x7a\xd8\x12\x49\xaf\xeb\xbe\x22\x1f\xa0\xf1\x2f\xd2\x1e\x69\x2c\x24\x66\x96\x5d\x23\xae\x6e\x7e\x57\x5c\xc6\x5b\x84\x74\x97\x47\xd2\x12\xe9\x04\xf9\xd0\x88\x04\xa6\x1d\xcb\x2f\xa4\x95\x58\xc9\x1d\x96\x1d\x62\x3f\x46\x7f\x99\xa1\x49\x76\xc3\x21\x71\x6f\x1e\xfd\x4d\x85\xd3\x9f\x00\x00\x00\xff\xff\xb4\x82\xc2\x3a\xd2\x06\x00\x00")

func templatesFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionTmpl,
		"templates/function.tmpl",
	)
}

func templatesFunctionTmpl() (*asset, error) {
	bytes, err := templatesFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/function.tmpl", size: 1746, mode: os.FileMode(420), modTime: time.Unix(1458395534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\x48\x4d\x4c\x49\x2d\x52\xaa\xad\xe5\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\x0b\x80\x30\x81\x82\x5c\x99\xb9\x05\xf9\x45\x25\x0a\x1a\x5c\xd5\xd5\x45\x89\x79\x40\x69\x3d\x4f\xb0\x48\x71\x6d\x2d\x50\xa1\x5f\x62\x2e\x50\x15\x44\x4b\x49\x06\x50\x7d\x75\x75\x6a\x5e\x0a\x90\xd6\x84\xb3\x00\x01\x00\x00\xff\xff\x81\x22\x53\x6f\x6b\x00\x00\x00")

func templatesHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderTmpl,
		"templates/header.tmpl",
	)
}

func templatesHeaderTmpl() (*asset, error) {
	bytes, err := templatesHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.tmpl", size: 107, mode: os.FileMode(420), modTime: time.Unix(1458245638, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInlineTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\xcb\x01\xd2\x4a\xb5\xb5\x0a\xd5\xd5\x25\xa9\xb9\x05\x39\x89\x25\x40\xd1\xe4\xc4\x9c\x1c\x25\x05\x3d\xb0\x68\x6a\x5e\x4a\x6d\x2d\x20\x00\x00\xff\xff\xaa\xeb\x41\xff\x31\x00\x00\x00")

func templatesInlineTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInlineTmpl,
		"templates/inline.tmpl",
	)
}

func templatesInlineTmpl() (*asset, error) {
	bytes, err := templatesInlineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inline.tmpl", size: 49, mode: os.FileMode(420), modTime: time.Unix(1458392794, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInputsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\xcb\x41\x0a\x02\x51\x08\xc6\xf1\xab\xc8\x30\xcb\x78\x07\x08\x3a\x40\xbb\xae\xf0\x60\x3e\x43\x28\x09\xc7\x56\x1f\x73\xf7\x46\x57\xad\x94\x9f\x7f\xc9\x0d\x6a\x0e\x59\xcc\x3f\xdf\xdc\x97\xe3\x20\x57\x95\xeb\x4d\x46\xad\xa6\xb2\xea\x78\x84\x79\xde\x3b\x28\x8c\xe9\x4f\xb4\xcf\x98\x6f\x24\xe2\xe4\xcc\x41\x36\xd4\xe7\x45\x48\xf8\x56\x35\x5e\x3b\xfa\xec\x67\xfb\xef\x35\x7e\x01\x00\x00\xff\xff\x43\x89\x5c\xae\x80\x00\x00\x00")

func templatesInputsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInputsTmpl,
		"templates/inputs.tmpl",
	)
}

func templatesInputsTmpl() (*asset, error) {
	bytes, err := templatesInputsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inputs.tmpl", size: 128, mode: os.FileMode(420), modTime: time.Unix(1458245638, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMessageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\xd1\xca\x82\x40\x10\x46\x5f\x65\x10\x85\xff\x07\x99\x07\x08\x7a\x80\x6e\x22\x22\xba\x5f\xf2\xd3\x06\x74\xb3\xdd\xd5\x88\x61\xde\x3d\x15\x13\xba\xfa\xe0\x70\x38\x33\xaa\x15\x6a\xf1\xa0\xac\x43\x8c\xae\x41\x66\xa6\x2a\x35\xf9\x47\x22\x3e\x05\xf1\xe9\xe0\xfb\x21\x45\xb3\xe2\xc9\xa4\x0a\x5f\xcd\xc6\x4b\xd2\x9d\xf8\x8c\x1b\x64\x44\x98\x09\x5f\xde\x3d\xf8\xea\xda\x01\x66\xbc\x89\x7c\x74\xdd\x04\xfe\x96\xe8\x6f\x50\x35\x38\xdf\x80\x72\x29\x29\x47\x4b\xbb\xfd\x24\xb8\x30\xf9\x09\x21\xae\x7f\xe4\x62\x56\x7e\xef\x16\xe3\xd6\x5d\xe6\x7f\xdd\x4f\x00\x00\x00\xff\xff\xeb\x6d\x22\x24\xc6\x00\x00\x00")

func templatesMessageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMessageTmpl,
		"templates/message.tmpl",
	)
}

func templatesMessageTmpl() (*asset, error) {
	bytes, err := templatesMessageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/message.tmpl", size: 198, mode: os.FileMode(420), modTime: time.Unix(1458245638, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResultsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcd\x41\x0a\xc2\x40\x0c\x05\xd0\xab\x7c\x4a\x97\xa5\x07\x10\x5c\x8a\x7b\x6f\x20\x34\x95\x81\x92\x81\x3f\xd3\x55\xc8\xdd\x4d\x6a\x51\x70\x35\x93\xfc\x97\xc4\x6c\x91\xb5\xa8\x60\xa0\xb4\x7d\xeb\x6d\x70\x87\x19\x9f\xfa\x12\x8c\x65\xc2\x28\x1b\x2e\x57\xcc\x8f\x4f\xec\x6e\x56\xd6\x48\xdc\xa7\x70\xa2\x4b\x76\xee\xb5\x63\xce\xcf\x59\x87\x88\x81\xbe\x53\xdb\x8d\xac\x4c\x2c\xe4\x99\xe3\x00\x95\xdf\xa5\xff\x38\x0f\xfe\xec\xf1\xbe\x03\x00\x00\xff\xff\xb0\x4f\xcf\x61\xa8\x00\x00\x00")

func templatesResultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesResultsTmpl,
		"templates/results.tmpl",
	)
}

func templatesResultsTmpl() (*asset, error) {
	bytes, err := templatesResultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/results.tmpl", size: 168, mode: os.FileMode(420), modTime: time.Unix(1458245638, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/call.tmpl": templatesCallTmpl,
	"templates/function.tmpl": templatesFunctionTmpl,
	"templates/header.tmpl": templatesHeaderTmpl,
	"templates/inline.tmpl": templatesInlineTmpl,
	"templates/inputs.tmpl": templatesInputsTmpl,
	"templates/message.tmpl": templatesMessageTmpl,
	"templates/results.tmpl": templatesResultsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"call.tmpl": &bintree{templatesCallTmpl, map[string]*bintree{}},
		"function.tmpl": &bintree{templatesFunctionTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{templatesHeaderTmpl, map[string]*bintree{}},
		"inline.tmpl": &bintree{templatesInlineTmpl, map[string]*bintree{}},
		"inputs.tmpl": &bintree{templatesInputsTmpl, map[string]*bintree{}},
		"message.tmpl": &bintree{templatesMessageTmpl, map[string]*bintree{}},
		"results.tmpl": &bintree{templatesResultsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

