// Code generated by go-bindata.
// sources:
// templates/call.tmpl
// templates/function.tmpl
// templates/header.tmpl
// templates/inline.tmpl
// templates/inputs.tmpl
// templates/message.tmpl
// templates/results.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCallTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\xe1\x8a\xc2\x40\x0c\x84\x5f\x25\x94\xfe\xb8\x83\x92\x07\x38\xb8\x07\xb8\x3f\x87\xa8\xe8\xef\x65\x9b\xd6\x40\x5d\x25\x8d\x8a\x84\xbc\xbb\xbb\xa5\xba\xbf\x02\x33\x5f\x66\xc6\xac\xa7\x81\x13\x41\x13\xc3\x34\x35\xee\x66\x0f\xd6\x13\xe0\x96\x22\xf1\x9d\xa4\x28\x3c\x40\xba\x28\xe0\xdf\xbc\x53\xb9\x45\x75\x57\x45\x33\x4a\x7d\x71\xdf\x24\xa0\x7b\x55\xf1\x3f\x9c\xc9\xfd\xcb\x4c\x42\x1a\x09\x5a\xee\xa0\xa5\x09\x7e\x7e\x01\x37\x41\xb2\xa9\x24\xf3\x9a\xde\xb2\x7b\x07\x9f\xdf\xda\x77\x14\xd6\xb2\x21\xf7\x05\x19\xe7\x1a\xbf\x44\x94\xc6\x85\xc6\xfd\xf3\x4a\x19\x3f\x04\xe1\xd0\x73\xcc\x43\xb0\xb2\xcb\xf9\x5e\xef\x2b\x00\x00\xff\xff\x65\x08\xbc\x88\xf1\x00\x00\x00")

func templatesCallTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCallTmpl,
		"templates/call.tmpl",
	)
}

func templatesCallTmpl() (*asset, error) {
	bytes, err := templatesCallTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/call.tmpl", size: 241, mode: os.FileMode(436), modTime: time.Unix(1466307953, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x51\x4f\xdb\x30\x10\x7e\x4e\x7e\xc5\x51\x0d\xd4\x4c\x9d\x79\x07\xf1\x30\x04\x9b\x78\x18\x45\x80\xc6\xc3\x34\x4d\x26\xbd\x74\xd1\x8c\xd3\x39\x0e\x08\x59\xf9\xef\x3b\x3b\x4e\xe2\xa4\x59\xcb\xa4\xbd\xd0\xe6\xe2\xbb\xef\xbb\xef\xbb\x73\x31\x66\x85\x59\x2e\x11\x66\x59\x25\x53\x9d\x17\x72\x56\xd7\x10\x1b\xf3\x01\xde\x65\x70\x72\x06\xac\xae\xe3\xd8\xbe\x03\x63\xd8\x3d\x96\xfa\x9a\x3f\x61\x5d\xcf\x35\xbc\xd7\xf4\x94\xcb\x35\xbb\x4f\xc0\xc4\x91\x4d\x79\xc9\xf5\x4f\x60\xb7\x98\x62\xfe\x8c\x8a\x32\x23\x17\xce\x33\x60\x57\xe5\x9d\x56\x55\xaa\x5d\xb0\x8b\x7e\xca\x51\xac\xca\x26\x16\xe9\xd7\x0d\x42\xe6\x22\x50\xba\xc3\xb6\xae\x3f\xad\xb8\x5c\xe3\x28\x81\x5e\xb8\x67\x4b\xd2\xd1\xa3\x02\xfe\x95\x4d\x41\xb9\xf2\x4f\x1d\x66\x1b\x0a\xbe\x8f\xbe\x5a\x56\xb6\xcd\x1b\xae\xa8\x51\x8d\xca\x81\x39\x6a\x5c\xad\x07\xc4\x02\x5a\xdb\x19\x0e\xd0\x85\xb6\xd8\x05\x88\x43\x7c\x2b\x68\x69\x45\xff\xf6\x7d\x04\x43\xac\x64\xa1\xc9\x12\x76\xa3\x72\xa9\xaf\xe4\xa6\xd2\x1e\x46\x12\xa8\x65\x45\x4e\xc4\xdb\x4d\x4e\x38\xd2\x16\xe4\x72\xd5\xdb\x32\x52\xd6\xbb\xd0\x7c\x74\xe2\x89\xb2\x97\xb7\x2d\x39\xec\x0e\x76\x08\xbd\x43\xde\x28\x72\xda\xda\x3f\x13\x39\x81\xc6\xb7\x58\x56\xa2\xed\xdc\x98\x07\x2e\xf5\x2e\x79\x3b\xc8\x5b\xd4\x95\x92\xe5\xa5\x52\x85\x17\xe1\x85\x52\xe9\x11\x1e\x8b\x42\x8c\x3c\xb1\xa2\x1f\x1f\xc3\xfd\xf2\x62\x79\x02\x1f\x57\x2b\xb0\xbe\x40\xca\x4b\x2c\x99\xb3\x2c\x2b\x14\x21\x7a\x4f\x48\xc2\x6b\xfe\x0b\x29\x15\x7e\x2c\x40\x6b\xeb\x9f\x31\xae\x96\x67\xde\xd8\x6a\xf6\x3b\x32\x5a\x92\xb1\xca\xae\xb0\x13\x90\x5a\x75\x67\x39\xe5\x1f\x79\x30\x2f\x01\xfb\xca\x45\x45\x42\x18\xd8\xb7\x3a\xac\xd9\xe4\x13\xe2\xcc\x1a\xa3\x59\xb0\x4f\x0b\xf8\xc7\x3d\x0a\xa1\xc6\xee\xf6\xfd\x3d\xa8\x5c\xb7\x5d\x0f\x16\x84\x9a\x3b\x7a\x7c\x25\xa9\xd8\x79\x95\x65\xa8\xcc\x5e\x2c\x3f\xc2\x73\x67\xc2\x52\x8a\xd7\xd0\xe4\x64\x3b\xbe\x94\xe8\xb4\x49\xa0\x25\xa5\xf1\x69\x23\xb8\xa6\xcb\x4f\x35\x73\x35\xa3\x0d\x73\xd3\xd4\xbf\x49\xb9\x10\x4d\xf8\xcd\xa3\x45\xd1\xc6\xa7\x31\x29\x2a\x8d\x34\x72\xce\xc7\x29\x84\xd3\x6e\x70\xe6\xf6\xdc\xc1\x19\xc8\x5c\x24\xf6\x93\x2c\x6a\x07\xb6\xb9\x12\x35\x73\x15\xb3\xf9\x2c\x2c\xf5\x84\x65\xc9\xd7\xe8\xdb\x40\x7b\x02\xce\xe0\xf0\x79\x01\x6d\xf6\xe1\xf3\x6c\x31\x40\xcf\xdd\x55\xd2\x67\x2c\x02\xac\xa4\x1b\x81\x76\x6d\x07\xfb\x17\x45\x69\x21\xe9\x17\xa0\xc2\xed\x51\xd9\x31\x1c\x13\x7b\x3c\x39\x1d\x4e\xc6\xcf\x85\xee\x67\xbf\x9b\x16\x76\xe7\xee\xbb\x79\x72\x1a\x1c\x69\x64\x0a\x2f\x05\x08\x6f\x2e\x0f\x71\xce\xcb\x3c\x0d\x7e\x28\x5a\xb3\xe8\x6a\x9d\x98\x15\xbb\x56\x03\x0a\xa1\x70\x82\x7e\x37\xc7\xc6\xed\xa2\x33\x71\x8f\xfe\x67\xf4\x03\x85\x99\xc0\x54\xb3\x0b\xc4\xcd\xe5\xef\x8a\x8b\x79\x57\x61\x31\xa4\x93\x04\x7c\x5a\xd3\xde\x32\x54\x2d\x5d\x4f\xf5\x0b\xd9\x98\x6f\xc4\x80\xaa\x67\xd3\x0f\xde\x9e\xa9\xfb\x2b\xc5\x89\x41\xaa\x63\xfa\x77\xc4\x03\xc4\x7f\x02\x00\x00\xff\xff\x00\xb9\xe4\x20\xbd\x08\x00\x00")

func templatesFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionTmpl,
		"templates/function.tmpl",
	)
}

func templatesFunctionTmpl() (*asset, error) {
	bytes, err := templatesFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/function.tmpl", size: 2237, mode: os.FileMode(436), modTime: time.Unix(1466308246, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\x48\x4d\x4c\x49\x2d\x52\xaa\xad\xe5\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\x0b\x80\x30\x81\x82\x5c\x99\xb9\x05\xf9\x45\x25\x0a\x1a\x5c\xd5\xd5\x45\x89\x79\x40\x69\x3d\x4f\xb0\x48\x71\x6d\x2d\x50\xa1\x5f\x62\x2e\x50\x15\x44\x4b\x49\x06\x50\x7d\x75\x75\x6a\x5e\x0a\x90\xd6\x84\xb3\x00\x01\x00\x00\xff\xff\x81\x22\x53\x6f\x6b\x00\x00\x00")

func templatesHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderTmpl,
		"templates/header.tmpl",
	)
}

func templatesHeaderTmpl() (*asset, error) {
	bytes, err := templatesHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.tmpl", size: 107, mode: os.FileMode(436), modTime: time.Unix(1455586613, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInlineTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\xcb\x01\xd2\x4a\xb5\xb5\x0a\xd5\xd5\x25\xa9\xb9\x05\x39\x89\x25\x40\xd1\xe4\xc4\x9c\x1c\x25\x05\x3d\xb0\x68\x6a\x5e\x4a\x6d\x2d\x20\x00\x00\xff\xff\xaa\xeb\x41\xff\x31\x00\x00\x00")

func templatesInlineTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInlineTmpl,
		"templates/inline.tmpl",
	)
}

func templatesInlineTmpl() (*asset, error) {
	bytes, err := templatesInlineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inline.tmpl", size: 49, mode: os.FileMode(420), modTime: time.Unix(1458418263, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInputsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\xcb\x41\x0a\xc2\x40\x0c\x85\xe1\xab\x84\xd2\xa5\xcc\x01\x04\x0f\xe0\xce\x2b\x0c\xf4\x4d\x09\x68\x90\x4c\x5c\x3d\x7a\x77\x9b\xac\xba\x4a\xf8\x78\x3f\xb9\x61\xa8\x41\x16\xb5\xef\x2f\xe6\x72\x1c\xe4\x3a\xe4\xfe\x90\x96\xaf\x0e\x59\x47\x7b\xb9\x5a\x3c\x6b\x90\xe8\xdd\x76\x94\x77\xef\x1f\x04\xfc\xe4\x88\xd6\x7d\x9f\x8d\x2c\xcd\xfc\x26\x24\x6c\xcb\x04\xef\x89\xda\xd8\x19\x5c\x3d\xcf\x3f\x00\x00\xff\xff\xf4\xa7\x19\x86\x85\x00\x00\x00")

func templatesInputsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInputsTmpl,
		"templates/inputs.tmpl",
	)
}

func templatesInputsTmpl() (*asset, error) {
	bytes, err := templatesInputsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inputs.tmpl", size: 133, mode: os.FileMode(436), modTime: time.Unix(1466308067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMessageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\xd1\xca\x82\x40\x10\x46\x5f\x65\x10\x85\xff\x07\x99\x07\x08\x7a\x80\x6e\x22\x22\xba\x5f\xf2\xd3\x06\x74\xb3\xdd\xd5\x88\x61\xde\x3d\x15\x13\xba\xfa\xe0\x70\x38\x33\xaa\x15\x6a\xf1\xa0\xac\x43\x8c\xae\x41\x66\xa6\x2a\x35\xf9\x47\x22\x3e\x05\xf1\xe9\xe0\xfb\x21\x45\xb3\xe2\xc9\xa4\x0a\x5f\xcd\xc6\x4b\xd2\x9d\xf8\x8c\x1b\x64\x44\x98\x09\x5f\xde\x3d\xf8\xea\xda\x01\x66\xbc\x89\x7c\x74\xdd\x04\xfe\x96\xe8\x6f\x50\x35\x38\xdf\x80\x72\x29\x29\x47\x4b\xbb\xfd\x24\xb8\x30\xf9\x09\x21\xae\x7f\xe4\x62\x56\x7e\xef\x16\xe3\xd6\x5d\xe6\x7f\xdd\x4f\x00\x00\x00\xff\xff\xeb\x6d\x22\x24\xc6\x00\x00\x00")

func templatesMessageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMessageTmpl,
		"templates/message.tmpl",
	)
}

func templatesMessageTmpl() (*asset, error) {
	bytes, err := templatesMessageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/message.tmpl", size: 198, mode: os.FileMode(436), modTime: time.Unix(1455586613, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResultsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcd\x41\x0a\xc2\x40\x0c\x05\xd0\xab\x7c\x4a\x97\xa5\x07\x10\x5c\x8a\x7b\x6f\x20\x34\x95\x81\x92\x81\x3f\xd3\x55\xc8\xdd\x4d\x6a\x51\x70\x35\x93\xfc\x97\xc4\x6c\x91\xb5\xa8\x60\xa0\xb4\x7d\xeb\x6d\x70\x87\x19\x9f\xfa\x12\x8c\x65\xc2\x28\x1b\x2e\x57\xcc\x8f\x4f\xec\x6e\x56\xd6\x48\xdc\xa7\x70\xa2\x4b\x76\xee\xb5\x63\xce\xcf\x59\x87\x88\x81\xbe\x53\xdb\x8d\xac\x4c\x2c\xe4\x99\xe3\x00\x95\xdf\xa5\xff\x38\x0f\xfe\xec\xf1\xbe\x03\x00\x00\xff\xff\xb0\x4f\xcf\x61\xa8\x00\x00\x00")

func templatesResultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesResultsTmpl,
		"templates/results.tmpl",
	)
}

func templatesResultsTmpl() (*asset, error) {
	bytes, err := templatesResultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/results.tmpl", size: 168, mode: os.FileMode(436), modTime: time.Unix(1455586613, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/call.tmpl": templatesCallTmpl,
	"templates/function.tmpl": templatesFunctionTmpl,
	"templates/header.tmpl": templatesHeaderTmpl,
	"templates/inline.tmpl": templatesInlineTmpl,
	"templates/inputs.tmpl": templatesInputsTmpl,
	"templates/message.tmpl": templatesMessageTmpl,
	"templates/results.tmpl": templatesResultsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"call.tmpl": &bintree{templatesCallTmpl, map[string]*bintree{}},
		"function.tmpl": &bintree{templatesFunctionTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{templatesHeaderTmpl, map[string]*bintree{}},
		"inline.tmpl": &bintree{templatesInlineTmpl, map[string]*bintree{}},
		"inputs.tmpl": &bintree{templatesInputsTmpl, map[string]*bintree{}},
		"message.tmpl": &bintree{templatesMessageTmpl, map[string]*bintree{}},
		"results.tmpl": &bintree{templatesResultsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

