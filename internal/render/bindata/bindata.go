// Code generated by go-bindata.
// sources:
// templates/call.tmpl
// templates/function.tmpl
// templates/header.tmpl
// templates/inline.tmpl
// templates/inputs.tmpl
// templates/message.tmpl
// templates/results.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCallTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\x41\x6a\xc3\x40\x0c\x45\xaf\x22\x8c\x17\x2d\x18\x1d\xa0\xd0\x03\x78\x53\x4a\x5b\xda\xb5\x18\xcb\xae\xc0\x9e\x16\x8d\x92\x10\x84\xee\x1e\xc6\x38\x99\xd5\x87\x3f\x6f\xde\x97\xfb\xc4\xb3\x64\x86\x2e\xd1\xba\x76\x11\xee\x17\xb1\x5f\xc0\x0f\x4e\x2c\x67\xd6\xda\xc8\x0c\xf9\xcf\x00\xc7\xf2\x69\x7a\x4a\x16\x61\x86\xee\x9c\xa7\xfa\x7a\x27\x01\x23\x5a\x8b\x6f\xb4\x71\xc4\x93\xbb\x52\x5e\x18\x7a\x19\xa0\xe7\x15\x5e\x5e\x01\xdf\x49\x69\x63\x63\x2d\x87\xbd\x97\x88\x01\x1e\x7f\xdb\xde\x8f\x8a\xd5\x1b\xcc\x90\x74\x29\x4d\xbf\x2b\xea\xe2\x4e\xe3\xd7\xf5\x9f\x71\x2c\xdf\xa4\x42\x93\xa4\x08\xc4\xc6\xee\xf1\x7c\xe4\x2d\x00\x00\xff\xff\x65\x08\xbc\x88\xf1\x00\x00\x00")

func templatesCallTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCallTmpl,
		"templates/call.tmpl",
	)
}

func templatesCallTmpl() (*asset, error) {
	bytes, err := templatesCallTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/call.tmpl", size: 241, mode: os.FileMode(420), modTime: time.Unix(1476415710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x4d\x6f\x1b\x37\x10\x3d\xaf\x7e\xc5\x44\x70\x02\x6d\x21\x33\x77\x07\x3e\x34\x88\x5b\xf4\xd0\xb8\xb0\x8d\xe6\x50\x14\x05\xbd\x9a\x55\x89\x52\x5c\x95\x9c\x75\x20\x10\xfc\xef\x05\xb9\xdc\xef\x0f\x0b\x75\xeb\xd6\x07\x4b\xcb\x8f\x99\xc7\x37\x6f\xde\x52\xd6\xee\x30\x17\x0a\x61\x9d\x97\x2a\x23\x51\xa8\xb5\x73\x2b\x6b\x2f\xe1\x22\x87\xab\x6b\x60\xce\xad\x56\x7e\x0a\xac\x65\x0f\x68\xe8\x33\x3f\xa0\x73\x1b\x82\x6f\x08\x0d\x09\xb5\x67\x0f\x29\xd8\x55\xe2\xb7\x7c\x15\xf4\x3b\xb0\x3b\xcc\x50\x3c\xa1\x76\x6e\x95\x84\x61\x91\x03\xfb\xc1\xdc\x93\x2e\x33\x0a\x83\xcd\xe8\x77\x02\xe5\xce\x54\x63\x09\x9d\x8e\x08\x79\x18\x01\x13\x16\xfb\xb8\x71\xb5\xe6\x6a\x8f\x83\x0d\x89\xb5\xe1\xd9\x83\x0c\xf0\x4e\x47\x8c\x53\x7e\x0b\xaa\x5d\x7c\x6a\x72\xd6\x43\x9d\xef\x83\xaf\x1e\x95\x3f\xe6\x4f\x5c\xf3\x03\x12\xea\x90\x2c\x40\xe3\x7a\xdf\x03\xd6\x81\x35\xde\x11\x12\x86\xa1\x11\xba\x4e\xc6\x7e\x7e\x4f\xa8\xf1\xa4\xff\xf2\x6b\x27\x8d\xe2\x07\xf4\x69\x85\xda\xc7\xcd\x13\x34\xd7\xd8\xb9\xda\xb5\x5c\x0f\xe8\x8a\xd4\x56\x1f\x0d\x23\xd2\xb4\x9c\xd5\x21\xc7\x84\xce\x90\xb7\x40\x59\x92\x04\xbe\xfc\xbf\x89\x3d\x1d\xde\xee\xd0\x94\x92\x4c\x9d\xe7\x0b\x57\xb4\x44\x59\x93\xf2\x0e\xa9\xd4\xca\xdc\x68\x5d\x44\x0e\xbe\x72\x45\x37\x5a\xc3\x63\x51\xc8\x01\xcf\x9e\xc8\xf7\xef\xe1\xe1\xf6\xd3\xed\x15\x7c\xbb\xdb\x81\xe7\x1a\x32\x6e\xd0\xb0\x50\x86\xbc\xd0\x60\xad\xc8\x41\x15\xe4\x19\xfc\xcc\xff\xc0\x9d\x73\xf0\xdb\x16\x88\x7c\x4d\xac\x0d\xb1\x22\xf2\xaa\x54\x76\x05\xf1\xaf\x06\x75\x5f\x3e\x56\x53\x97\xce\x35\x93\xc4\xee\x4a\xb5\x21\x62\xbe\x94\x5b\xf0\xdd\x34\xee\x9f\xf9\xd2\xce\xf4\xd0\xa8\x60\x01\x64\x28\xc6\xe9\x88\x61\x31\xd7\xce\xbd\x8b\xc0\x23\x9d\xec\x67\x2e\x4b\x74\xce\xd6\x21\x66\x5a\x2b\xb1\x96\x55\xad\x7e\x05\x44\xac\x12\x0d\xeb\x34\xdc\xb6\x0d\xd0\x36\x5a\x32\xd1\x7d\xa3\x87\x98\x6f\xa2\x5f\xea\x63\x7e\xd1\x82\x9a\xd3\xf7\xfa\xe8\xea\x1a\xde\x3d\x9e\x08\x0d\xfb\x58\xe6\x39\x6a\x7b\x4e\xc2\xd8\x17\x9b\x50\xda\x5b\x25\x4f\x5d\xe9\xa4\xe3\xf1\x5b\x85\x81\xa5\x14\x1a\x64\x84\x87\xa3\xe4\x84\xb0\xd6\x95\x5c\xd7\x70\x91\x07\x91\xb6\x33\x19\x97\xb2\x1a\x9e\x43\x31\xa1\xd9\x44\xe4\xb1\x6a\x43\x60\xce\x01\x6a\x5d\x55\x75\x2a\xc9\x87\x46\x92\x1b\xbf\xee\xcd\x35\x28\x21\x53\xff\x49\xc4\xea\x56\x88\x65\x26\x16\x42\xe6\x9b\x75\x37\xd6\x01\x8d\xe1\x7b\x8c\x47\x41\xbf\x02\xae\xe1\xed\xd3\x16\xea\xed\x6f\x9f\xd6\xdb\x5e\x7a\xa1\x8e\x65\x73\x78\xd4\x7a\xdb\x49\x96\xb6\x8a\xa8\x2d\xa1\xd7\xdb\x49\x92\x64\x85\x22\xa1\x4a\x9c\xd2\xce\xa2\x58\xc6\xc1\xe6\xd4\x12\xf8\xfc\xbe\xa0\xb6\x25\x1a\xf5\xb0\xfb\xe0\xa2\x9b\xf4\x43\x67\x49\xc5\x57\xd7\x77\x5a\x45\x49\x83\x31\xc7\x47\x6e\x44\xd6\x79\xbf\x34\x65\xbb\xc8\xa7\x94\xe3\xdb\xad\x87\xa1\xcb\xa0\x14\x0a\x87\x25\x3c\x1b\xcf\xbf\x94\xff\x8d\xc6\x5c\x62\x46\xec\x13\xe2\xf1\xe6\xcf\x92\xcb\x4d\x13\x61\xdb\x07\x94\x76\x11\x35\xd5\x3b\x47\x61\x35\xe0\x08\xf6\xc7\x52\x92\x38\xca\x1e\xd8\x88\xa7\x55\xe1\x33\x12\x9c\x05\x39\x2d\x29\x97\xf6\x1c\x3b\x14\xf8\x32\xbe\x55\x96\x5e\xab\x43\xeb\x7d\xb9\xf3\x2e\xdc\x69\xce\xf1\xdd\xf3\xef\x37\x4b\x96\x3b\xd3\x43\xcf\x1b\xee\x33\xd7\x81\x17\xb9\xed\xdf\x30\xdb\xf3\xae\x07\xaf\xe1\xb4\xaf\x68\xb4\x0b\x3e\xdb\xb3\xd9\x9e\x54\x16\xc4\x31\x71\x17\x9b\x54\xc7\x3f\x63\xb0\xcf\xf8\xeb\x2b\xdb\xeb\xc0\x5d\xff\x73\x73\xed\xd5\xec\xff\x68\xad\x1d\x1d\x35\x06\xda\xfc\xa6\x71\xab\x55\xfd\xf4\x57\x00\x00\x00\xff\xff\x08\x6a\x6f\xd8\x5f\x0e\x00\x00")

func templatesFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionTmpl,
		"templates/function.tmpl",
	)
}

func templatesFunctionTmpl() (*asset, error) {
	bytes, err := templatesFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/function.tmpl", size: 3679, mode: os.FileMode(420), modTime: time.Unix(1478139393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\xcb\x31\x0a\x02\x31\x10\x85\xe1\x7e\x4e\x31\x6c\xa5\x4d\xee\x61\x23\x5e\x61\x30\xcf\xdd\x20\x89\x21\xa6\x7b\xbc\xbb\x0b\x06\xb6\xfb\xf8\xe1\x27\x33\x5e\xa5\xc1\xb7\x03\x91\x31\x36\xc9\x7a\x3c\xdf\xb1\xc3\xc9\xf4\x58\x94\xcc\x4a\xed\x9f\x31\xfd\x62\xe4\x88\xb6\xc3\xd3\xed\x5f\xbe\x12\x99\xee\x51\x21\xad\x65\x1e\x92\x91\x68\x59\xb2\xeb\xa9\x5f\x00\x00\x00\xff\xff\x81\x22\x53\x6f\x6b\x00\x00\x00")

func templatesHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderTmpl,
		"templates/header.tmpl",
	)
}

func templatesHeaderTmpl() (*asset, error) {
	bytes, err := templatesHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.tmpl", size: 107, mode: os.FileMode(420), modTime: time.Unix(1476415710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInlineTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\xcb\xc9\xcc\x4b\x55\xaa\xad\x55\xa8\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4e\xcc\xc9\x51\x52\xd0\x03\x8b\xa6\xe6\xa5\xd4\xd6\x02\x02\x00\x00\xff\xff\xaa\xeb\x41\xff\x31\x00\x00\x00")

func templatesInlineTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInlineTmpl,
		"templates/inline.tmpl",
	)
}

func templatesInlineTmpl() (*asset, error) {
	bytes, err := templatesInlineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inline.tmpl", size: 49, mode: os.FileMode(420), modTime: time.Unix(1476415710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInputsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8d\x31\x0a\x02\x41\x0c\x45\xaf\x12\x96\x2d\x25\x07\x10\x3c\x80\x9d\xe0\x09\x22\x9b\x59\xa6\xd8\x28\x99\x6c\xf5\xc9\xdd\x65\x46\x8b\xa9\x12\x1e\xff\xbf\x0f\x6c\x5a\xaa\x29\x2d\xd5\x3e\x67\xb4\x25\x13\x58\x0b\x5d\x6f\xc4\xfd\xad\x85\xec\x1d\xc4\xcf\xf3\x15\xda\xa2\x65\x46\xb0\xc9\xa1\x17\x02\xd4\xb6\x7f\x66\x2d\xfc\xf0\x6a\x71\x1f\x92\x0e\x5d\x6c\xd7\xc1\xc5\xe5\xd0\x50\xff\x75\xc5\xf7\xc6\xc0\xa0\x7d\x62\xf2\xcc\xe7\x1b\x00\x00\xff\xff\x8e\xbc\xcf\xda\x98\x00\x00\x00")

func templatesInputsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInputsTmpl,
		"templates/inputs.tmpl",
	)
}

func templatesInputsTmpl() (*asset, error) {
	bytes, err := templatesInputsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inputs.tmpl", size: 152, mode: os.FileMode(420), modTime: time.Unix(1478140895, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMessageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x8d\xe1\x6a\x83\x40\x10\x84\xff\xfb\x14\x8b\x28\xb4\xa0\xfb\x00\x85\x3e\x40\xff\x14\x69\x4b\xff\x5f\xe2\x68\x16\xf4\x62\xee\x4e\x43\x58\xf6\xdd\x83\x07\xf1\xd7\x0c\x33\xc3\x37\xaa\x3d\x06\xf1\xa0\x72\x46\x8c\x6e\x44\x49\xad\x59\xa1\x2a\x03\xf9\x6b\x22\xfe\x5d\x4f\x09\x31\x45\xb3\xfa\xc6\xa4\x0a\xdf\x9b\xa9\xde\x25\x5d\x88\x7f\x70\x86\x6c\x08\x7b\xc2\x7f\x8f\x05\xfc\xef\xa6\x15\x66\x7c\x0c\xf9\xdb\xcd\x30\x7b\xcb\x44\xee\x82\xf8\xf4\xe5\x97\x75\x07\xaa\x06\xe7\x47\x50\x25\x0d\x55\x98\xe8\xe3\x93\xb8\x73\xc1\xcd\x48\x08\xb9\x97\x81\x2a\x31\x6b\x5e\xbf\xf5\x76\x70\xb3\xbc\x17\xaa\x2d\x65\xfb\x0c\x00\x00\xff\xff\x90\x2e\xb9\x52\xc9\x00\x00\x00")

func templatesMessageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMessageTmpl,
		"templates/message.tmpl",
	)
}

func templatesMessageTmpl() (*asset, error) {
	bytes, err := templatesMessageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/message.tmpl", size: 201, mode: os.FileMode(420), modTime: time.Unix(1478134510, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResultsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8d\x4d\x0a\xc2\x40\x0c\x85\xaf\xf2\x28\xb3\x2c\x3d\x80\xe0\x52\xdc\x7b\x03\xa1\x19\x09\x94\x0c\xbc\x99\xae\x42\xee\x2e\xa9\x45\xc1\x55\x7e\xbe\x2f\x79\xee\xab\x54\x35\xc1\x44\xe9\xfb\x36\xfa\x14\x01\x77\x3e\xed\x25\x28\x3a\xa3\xc8\x86\xcb\x15\xcb\xe3\x83\x23\xdc\xb5\xa2\x68\xc4\x0c\x77\xb1\x35\x37\xf7\x36\xb0\x64\x73\xce\x5a\xf3\x60\xec\xb4\x7e\x23\x1b\x53\x16\xf2\xe4\x38\x84\xc6\xef\xd3\x7f\x39\x03\x7f\xee\x51\xdf\x01\x00\x00\xff\xff\xb0\x4f\xcf\x61\xa8\x00\x00\x00")

func templatesResultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesResultsTmpl,
		"templates/results.tmpl",
	)
}

func templatesResultsTmpl() (*asset, error) {
	bytes, err := templatesResultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/results.tmpl", size: 168, mode: os.FileMode(420), modTime: time.Unix(1476415710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/call.tmpl": templatesCallTmpl,
	"templates/function.tmpl": templatesFunctionTmpl,
	"templates/header.tmpl": templatesHeaderTmpl,
	"templates/inline.tmpl": templatesInlineTmpl,
	"templates/inputs.tmpl": templatesInputsTmpl,
	"templates/message.tmpl": templatesMessageTmpl,
	"templates/results.tmpl": templatesResultsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"call.tmpl": &bintree{templatesCallTmpl, map[string]*bintree{}},
		"function.tmpl": &bintree{templatesFunctionTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{templatesHeaderTmpl, map[string]*bintree{}},
		"inline.tmpl": &bintree{templatesInlineTmpl, map[string]*bintree{}},
		"inputs.tmpl": &bintree{templatesInputsTmpl, map[string]*bintree{}},
		"message.tmpl": &bintree{templatesMessageTmpl, map[string]*bintree{}},
		"results.tmpl": &bintree{templatesResultsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

