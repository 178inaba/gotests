{{define "function"}} {{$f := .}}

func {{.TestName}}(t *testing.T) {
	tests := []struct { {{if not $f.PrintInputs}}
		name string {{end}} {{with .Receiver}} {{if .IsStruct}} {{range .Fields}}
		{{.Name}} {{.Type}} {{end}} {{else}}
		{{Receiver .}} {{.Type}} {{end}} {{end}} {{range .TestParameters}}
		{{Param .}} {{.Type}} {{end}} {{range .TestResults}}
		{{Want .}} {{.Type}} {{end}} {{if .ReturnsError}}
		wantErr bool {{end}}
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests { {{with .Receiver}}{{if .IsStruct}}
		{{Receiver .}} := {{if .Type.IsStar}}&{{end}}{{.Type.Value}}{ {{range .Fields}}
		{{.Name}}: tt.{{.Name}}, {{end}}
		} {{end}} {{end}} {{range .Parameters}}{{if .IsWriter}}
		{{Param .}} := &bytes.Buffer{} {{end}} {{end}} {{if and (not .OnlyReturnsError) (not .OnlyReturnsOneValue) }}
		{{template "results" $f}} {{template "call" $f}} {{end}} {{if .ReturnsError}}
		if {{if .OnlyReturnsError}} err := {{template "call" $f}}; {{end}} (err != nil) != tt.wantErr {
			t.Errorf("{{template "message" $f}} error = %v, wantErr %v", {{template "inputs" $f}} err, tt.wantErr) {{if .TestResults}}
			continue {{end}}
		} {{end}} {{range .TestResults}} {{if .IsWriter}}
		if {{Got .}} := {{Param .}}.String(); {{Got .}} != tt.{{Want .}} { {{else if .IsBasicType}}
		if {{template "inline" $f}} {{Got .}} != tt.{{Want .}} { {{else}}
		if {{template "inline" $f}} !reflect.DeepEqual({{Got .}}, tt.{{Want .}}) { {{end}}
			t.Errorf("{{template "message" $f}} {{if $f.ReturnsMultiple}}{{Got .}} {{end}}= %v, want %v", {{template "inputs" $f}} {{Got .}}, tt.{{Want .}})
		} {{end}}
	}
}

{{end}}
