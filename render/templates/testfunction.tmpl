{{define "testfunction"}}
{{$f := .}}
func {{.TestName}}(t *testing.T) {
	tests := []struct {
		name string{{if .Receiver}}{{if .Receiver.IsNamed}}
		{{.Receiver.Name}} {{.Receiver.Type}}{{else}}
		{{.Receiver.ShortName}} {{.Receiver.Type}}{{end}}{{end}}{{range $index, $element := .Parameters}}{{if .IsNamed}}
		{{.Name}} {{.Type}}{{else}}
		in{{$index}} {{.Type}}{{end}}{{end}}{{range $index, $element := .Results}}
		want{{if $f.ReturnsMultiple}}{{$index}}{{end}} {{.Type}}{{end}}{{if .ReturnsError}}
		wantErr bool{{end}}
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests { {{if and (not .OnlyReturnsError) (not .OnlyReturnsOneValue) }}
		{{if .Results}}{{range $index, $element := .Results}}{{if $index}}, {{end}}got{{if $f.ReturnsMultiple}}{{$index}}{{end}}{{end}}{{if .ReturnsError}}, err{{end}} := {{else if .ReturnsError}}err := {{end}}{{template "func" .}}{{end}}{{if .ReturnsError}}
		if {{if .OnlyReturnsError}}err := {{template "func" .}}; {{end}} (err != nil) != tt.wantErr {
			t.Errorf("%v. {{.Name}}() error = %v, wantErr %v", tt.name, err, tt.wantErr){{if .Results}}
			continue{{end}}
		}{{end}}{{range $index, $element := .Results}}{{if .IsBasicType}}
		if {{if $f.OnlyReturnsOneValue}}got := {{template "func" $f}}; {{end}} got{{if $f.ReturnsMultiple}}{{$index}}{{end}} != tt.want{{if $f.ReturnsMultiple}}{{$index}}{{end}} { {{else}}
		if {{if $f.OnlyReturnsOneValue}}got := {{template "func" $f}}; {{end}} !reflect.DeepEqual(got{{if $f.ReturnsMultiple}}{{$index}}{{end}}, tt.want{{if $f.ReturnsMultiple}}{{$index}}{{end}}) { {{end}}
			t.Errorf("%v. {{$f.Name}}() {{if $f.ReturnsMultiple}}got{{$index}} {{end}}= %v, want %v", tt.name, got{{if $f.ReturnsMultiple}}{{$index}}{{end}}, tt.want{{if $f.ReturnsMultiple}}{{$index}}{{end}})
		}{{end}}
	}
}
{{end}}